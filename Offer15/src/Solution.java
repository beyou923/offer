/**
 * 请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 *
 * 示例 1：
 *      输入：00000000000000000000000000001011
 *      输出：3
 *      解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 *
 * 示例 2：
 *      输入：00000000000000000000000010000000
 *      输出：1
 *      解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 *
 *  示例 3：
 *      输入：11111111111111111111111111111101
 *      输出：31
 *      解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 链接：https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof
 * */

public class Solution {
    // you need to treat n as an unsigned value
    /* 不同将n最低位循环右移和1做按位与运行，因为当n是负数的时候，最高为是1，右移一位为保障任然是负数最高会置为1而不是0，这样结果就不对了，
    甚至出现死循环！！
    public int hammingWeight(int n) {
        int count = 0;
        while (n > 0) {
            if ((n & 1) == 1)
                count++;
            n = n >> 1;
        }
        return count;
    }
     */
    public int hammingWeight(int n) {
        // 这种解法需要循环32次（int占32位）
        int count = 0;
        while (n != 0) {
            if (1 == (n & 1))
                count++;
            n = n >>> 1; // >>> 运算符在循环右移的时候忽略符号
        }
        return count;
    }
    //TODO: 把一个整数减去1再和原来的整数做与运算，就会把该整数最右边的1变成0.这样一来一个二进制的整数中有几个1就做几次这样的操作
    //TODO：n 的二进制表示中有多少个1就循环几次.
    public int hammingWeight1(int n){
        int count = 0;
        while (n != 0){
            ++count;
            // TODO: 将n与 n -1 按位与相当于把n最右边的 1 取反
            n = (n - 1) & n;
        }
        return count;
    }
}
